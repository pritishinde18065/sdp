from abc import ABC, abstractmethod
class SmartphonePrototype(ABC):
    @abstractmethod
    def clone(self):
        pass
class Smartphone(SmartphonePrototype):
    def __init__(self, model, ram, storage, color):
        self.model = model
        self.ram = ram
        self.storage = storage
        self.color = color


    def clone(self):
        return Smartphone(self.model, self.ram, self.storage, self.color)


    def display(self):
        print(f"Model: {self.model}, RAM: {self.ram}, Storage: {self.storage}, Color: {self.color}")


base_phone = Smartphone("Galaxy S24", "8GB", "256GB", "Matte Black")
base_phone.display()

custom_phone1 = base_phone.clone()
custom_phone1.ram = "12GB"
custom_phone1.color = "Silver"

print("\nCustomized Phone 1:")
custom_phone1.display()

custom_phone2 = base_phone.clone()
custom_phone2.storage = "512GB"

print("\nCustomized Phone 2:")
custom_phone2.display()















from abc import ABC, abstractmethod


class EnemyPrototype(ABC):
    @abstractmethod
    def clone(self):
        pass


class Enemy(EnemyPrototype):
    def __init__(self, enemy_type, health, attack_power, ai_behavior):
        self.enemy_type = enemy_type
        self.health = health
        self.attack_power = attack_power
        self.ai_behavior = ai_behavior


    def clone(self):
        return Enemy(self.enemy_type, self.health, self.attack_power, self.ai_behavior)


    def display(self):
        print(f"Type: {self.enemy_type}, Health: {self.health}, Attack: {self.attack_power}, AI: {self.ai_behavior}")


# Create base enemy prototypes
base_zombie = Enemy("Zombie", 100, 20, "Aggressive")
base_zombie.display()


# Create customized enemies by cloning
custom_zombie1 = base_zombie.clone()
custom_zombie1.health = 70
custom_zombie1.ai_behavior = "Defensive"


print("\nCustomized Zombie 1:")
custom_zombie1.display()


custom_zombie2 = base_zombie.clone()
custom_zombie2.attack_power = 30
custom_zombie2.health = 150


print("\nCustomized Zombie 2:")
custom_zombie2.display()







#import copy

class Car:
    def __init__(self, model):
        self.model = model

    def set_model(self, model):
        self.model = model

    def get_model(self):
        return self.model

    def clone(self):
        return copy.copy(self)

if __name__ == "__main__":
    original_car = Car("Tesla Model S")
    cloned_car = original_car.clone()

    print(f"Original: {original_car.get_model()}")  # Tesla Model S
    print(f"Clone: {cloned_car.get_model()}")       # Tesla Model S

    cloned_car.set_model("Tesla Model 3")

    print("\nAfter change:")
    print(f"Original: {original_car.get_model()}")  # Tesla Model S (unchanged)
    print(f"Clone: {cloned_car.get_model()}")      # Tesla Model 3








#Prototype interface
class Shape:
    def clone(self):
        raise NotImplementedError("Subclass must implement clone method")

    def draw(self):
        raise NotImplementedError("Subclass must implement draw method")

#Concrete shape classes
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def clone(self):
        return Circle(self.radius)

    def draw(self):
        print(f"Drawing a circle with radius {self.radius}")

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def clone(self):
        return Rectangle(self.width, self.height)

    def draw(self):
        print(f"Drawing a rectangle with width {self.width} and height {self.height}")


class Square(Shape):
    def __init__(self, side):
        self.side = side

    def clone(self):
        return Square(self.side)

    def draw(self):
        print(f"Drawing a rectangle with Side {self.side}")


#Client code
if __name__ == "__main__":
    # Create a circle and rectangle
    circle = Circle(5)
    rectangle = Rectangle(3, 4)
    square = Square(5.8)

    # Clone the shapes
    cloned_circle = circle.clone()
    cloned_rectangle = rectangle.clone()
    cloned_square = square.clone()

    # Draw the original and cloned shapes
    print("Original shapes:")
    circle.draw()
    rectangle.draw()
    square.draw()

    print("\nCloned shapes:")
    cloned_circle.draw()
    cloned_rectangle.draw()
    cloned_square.draw()






import copy

class Car:
    def __init__(self, model):
        self.model = model

    def clone(self):
        return copy.copy(self)

    def __str__(self):
        return f"Car: {self.model}"

# Prototype registry
class CarRegistry:
    def __init__(self):
        self._prototypes = {}

    def add_prototype(self, name, prototype):
        self._prototypes[name] = prototype

    def get_prototype(self, name):
        return self._prototypes[name].clone()

# Usage
if __name__ == "__main__":
    registry = CarRegistry()
    registry.add_prototype("Tesla", Car("Tesla Model S"))

    cloned_car = registry.get_prototype("Tesla")
    print(cloned_car)  # Output: Car: Tesla Model S

    cloned_car.model = "Tesla Model 3"
    print(cloned_car)  # Output: Car: Tesla Model 3
